ops.push_back({ "mov           r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 0011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov           0x%X -> r[%d]",                   BITPACK(1110, 0000, 0000, 0000), 0xF000, ____nnnniiiiiiii });
ops.push_back({ "mova          @(disp -> PC) -> R0",             BITPACK(1100, 0111, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "mov.w         @(disp -> PC) -> r[%d]",          BITPACK(1001, 0000, 0000, 0000), 0xF000, ____nnnndddddddd });
ops.push_back({ "mov.l         @(disp -> PC) -> r[%d]",          BITPACK(1101, 0000, 0000, 0000), 0xF000, ____nnnndddddddd });
ops.push_back({ "mov.b         @r[%d] -> r[%d]",                 BITPACK(0110, 0000, 0000, 0000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.w         @r[%d] -> r[%d]",                 BITPACK(0110, 0000, 0000, 0001), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.l         @r[%d] -> r[%d]",                 BITPACK(0110, 0000, 0000, 0010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.b         r[%d] -> @r[%d]",                 BITPACK(0010, 0000, 0000, 0000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.w         r[%d] -> @r[%d]",                 BITPACK(0010, 0000, 0000, 0001), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.l         r[%d] -> @r[%d]",                 BITPACK(0010, 0000, 0000, 0010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.b         @r[%d]+ -> r[%d]",                BITPACK(0110, 0000, 0000, 0100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.w         @r[%d]+ -> r[%d]",                BITPACK(0110, 0000, 0000, 0101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.l         @r[%d]+ -> r[%d]",                BITPACK(0110, 0000, 0000, 0110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.b         r[%d] -> @-r[%d]",                BITPACK(0010, 0000, 0000, 0100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.w         r[%d] -> @-r[%d]",                BITPACK(0010, 0000, 0000, 0101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.l         r[%d] -> @-r[%d]",                BITPACK(0010, 0000, 0000, 0110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.b         @(disp -> r[%d]) -> R0",          BITPACK(1000, 0100, 0000, 0000), 0xFF00, ________mmmmdddd });
ops.push_back({ "mov.w         @(disp -> r[%d]) -> R0",          BITPACK(1000, 0101, 0000, 0000), 0xFF00, ________mmmmdddd });
ops.push_back({ "mov.l         @(disp -> r[%d]) -> r[%d]",       BITPACK(0101, 0000, 0000, 0000), 0xF000, ____nnnnmmmmdddd });
ops.push_back({ "mov.b         R0 -> @(disp -> r[%d])",          BITPACK(1000, 0000, 0000, 0000), 0xFF00, ________nnnndddd });
ops.push_back({ "mov.w         R0 -> @(disp -> r[%d])",          BITPACK(1000, 0001, 0000, 0000), 0xFF00, ________nnnndddd });
ops.push_back({ "mov.l         r[%d] -> @(disp -> r[%d])",       BITPACK(0001, 0000, 0000, 0000), 0xF000, ____nnnnmmmmdddd });
ops.push_back({ "mov.b         @(R0 -> r[%d]) -> r[%d]",         BITPACK(0000, 0000, 0000, 1100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.w         @(R0 -> r[%d]) -> r[%d]",         BITPACK(0000, 0000, 0000, 1101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.l         @(R0 -> r[%d]) -> r[%d]",         BITPACK(0000, 0000, 0000, 1110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.b         r[%d] -> @(R0 -> r[%d])",         BITPACK(0000, 0000, 0000, 0100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.w         r[%d] -> @(R0 -> r[%d])",         BITPACK(0000, 0000, 0000, 0101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.l         r[%d] -> @(R0 -> r[%d])",         BITPACK(0000, 0000, 0000, 0110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mov.b         @(disp -> GBR) -> R0",            BITPACK(1100, 0100, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "mov.w         @(disp -> GBR) -> R0",            BITPACK(1100, 0101, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "mov.l         @(disp -> GBR) -> R0",            BITPACK(1100, 0110, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "mov.b         R0 -> @(disp -> GBR)",            BITPACK(1100, 0000, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "mov.w         R0 -> @(disp -> GBR)",            BITPACK(1100, 0001, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "mov.l         R0 -> @(disp -> GBR)",            BITPACK(1100, 0010, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "movco.l       R0 -> @r[%d]",                    BITPACK(0000, 0000, 0111, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "movli.l       @r[%d] -> R0",                    BITPACK(0000, 0000, 0110, 0011), 0xF0FF, ____mmmm________ });
ops.push_back({ "movua.l       @r[%d] -> R0",                    BITPACK(0100, 0000, 1010, 1001), 0xF0FF, ____mmmm________ });
ops.push_back({ "movua.l       @r[%d]+ -> R0",                   BITPACK(0100, 0000, 1110, 1001), 0xF0FF, ____mmmm________ });
ops.push_back({ "movt          r[%d]",                           BITPACK(0000, 0000, 0010, 1001), 0xF0FF, ____nnnn________ });
ops.push_back({ "swap.b        r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "swap.w        r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1001), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "xtrct         r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "add           r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "add           0x%X -> r[%d]",                   BITPACK(0111, 0000, 0000, 0000), 0xF000, ____nnnniiiiiiii });
ops.push_back({ "addc          r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "addv          r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "cmp/eq        0x%X -> R0",                      BITPACK(1000, 1000, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "cmp/eq        r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "cmp/hs        r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "cmp/ge        r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "cmp/hi        r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "cmp/gt        r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "cmp/pl        r[%d]",                           BITPACK(0100, 0000, 0001, 0101), 0xF0FF, ____nnnn________ });
ops.push_back({ "cmp/pz        r[%d]",                           BITPACK(0100, 0000, 0001, 0001), 0xF0FF, ____nnnn________ });
ops.push_back({ "cmp/str       r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "div0s         r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 0111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "div0u        ",                                 BITPACK(0000, 0000, 0001, 1001), 0xFFFF, ________________ });
ops.push_back({ "div1          r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "dmuls.l       r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "dmulu.l       r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 0101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "dt            r[%d]",                           BITPACK(0100, 0000, 0001, 0000), 0xF0FF, ____nnnn________ });
ops.push_back({ "exts.b        r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "exts.w        r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "extu.b        r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "extu.w        r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mac.l         @r[%d]+ -> @r[%d]+",              BITPACK(0000, 0000, 0000, 1111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mac.w         @r[%d]+ -> @r[%d]+",              BITPACK(0100, 0000, 0000, 1111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mul.l         r[%d] -> r[%d]",                  BITPACK(0000, 0000, 0000, 0111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "muls.w        r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "mulu.w        r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "neg           r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "negc          r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 1010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "sub           r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "subc          r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "subv          r[%d] -> r[%d]",                  BITPACK(0011, 0000, 0000, 1011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "and           r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1001), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "and           0x%X -> R0",                      BITPACK(1100, 1001, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "and.b         0x%X -> @(R0 -> GBR)",            BITPACK(1100, 1101, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "not           r[%d] -> r[%d]",                  BITPACK(0110, 0000, 0000, 0111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "or            r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "or            0x%X -> R0",                      BITPACK(1100, 1011, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "or.b          0x%X -> @(R0 -> GBR)",            BITPACK(1100, 1111, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "tas.b         @r[%d]",                          BITPACK(0100, 0000, 0001, 1011), 0xF0FF, ____nnnn________ });
ops.push_back({ "tst           r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "tst           0x%X -> R0",                      BITPACK(1100, 1000, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "tst.b         0x%X -> @(R0 -> GBR)",            BITPACK(1100, 1100, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "xor           r[%d] -> r[%d]",                  BITPACK(0010, 0000, 0000, 1010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "xor           0x%X -> R0",                      BITPACK(1100, 1010, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "xor.b         0x%X -> @(R0 -> GBR)",            BITPACK(1100, 1110, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "rotcl         r[%d]",                           BITPACK(0100, 0000, 0010, 0100), 0xF0FF, ____nnnn________ });
ops.push_back({ "rotcr         r[%d]",                           BITPACK(0100, 0000, 0010, 0101), 0xF0FF, ____nnnn________ });
ops.push_back({ "rotl          r[%d]",                           BITPACK(0100, 0000, 0000, 0100), 0xF0FF, ____nnnn________ });
ops.push_back({ "rotr          r[%d]",                           BITPACK(0100, 0000, 0000, 0101), 0xF0FF, ____nnnn________ });
ops.push_back({ "shad          r[%d] -> r[%d]",                  BITPACK(0100, 0000, 0000, 1100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "shal          r[%d]",                           BITPACK(0100, 0000, 0010, 0000), 0xF0FF, ____nnnn________ });
ops.push_back({ "shar          r[%d]",                           BITPACK(0100, 0000, 0010, 0001), 0xF0FF, ____nnnn________ });
ops.push_back({ "shld          r[%d] -> r[%d]",                  BITPACK(0100, 0000, 0000, 1101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "shll          r[%d]",                           BITPACK(0100, 0000, 0000, 0000), 0xF0FF, ____nnnn________ });
ops.push_back({ "shll2         r[%d]",                           BITPACK(0100, 0000, 0000, 1000), 0xF0FF, ____nnnn________ });
ops.push_back({ "shll8         r[%d]",                           BITPACK(0100, 0000, 0001, 1000), 0xF0FF, ____nnnn________ });
ops.push_back({ "shll16        r[%d]",                           BITPACK(0100, 0000, 0010, 1000), 0xF0FF, ____nnnn________ });
ops.push_back({ "shlr          r[%d]",                           BITPACK(0100, 0000, 0000, 0001), 0xF0FF, ____nnnn________ });
ops.push_back({ "shlr2         r[%d]",                           BITPACK(0100, 0000, 0000, 1001), 0xF0FF, ____nnnn________ });
ops.push_back({ "shlr8         r[%d]",                           BITPACK(0100, 0000, 0001, 1001), 0xF0FF, ____nnnn________ });
ops.push_back({ "shlr16        r[%d]",                           BITPACK(0100, 0000, 0010, 1001), 0xF0FF, ____nnnn________ });
ops.push_back({ "bf            0x%04X",                          BITPACK(1000, 1011, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "bf/s          0x%04X",                          BITPACK(1000, 1111, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "bt            0x%04X",                          BITPACK(1000, 1001, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "bt/s          0x%04X",                          BITPACK(1000, 1101, 0000, 0000), 0xFF00, ________dddddddd });
ops.push_back({ "bra           0x%04X",                          BITPACK(1010, 0000, 0000, 0000), 0xF000, ____dddddddddddd });
ops.push_back({ "braf          r[%d]",                           BITPACK(0000, 0000, 0010, 0011), 0xF0FF, ____mmmm________ });
ops.push_back({ "bsr           0x%04X",                          BITPACK(1011, 0000, 0000, 0000), 0xF000, ____dddddddddddd });
ops.push_back({ "bsrf          r[%d]",                           BITPACK(0000, 0000, 0000, 0011), 0xF0FF, ____mmmm________ });
ops.push_back({ "jmp           @r[%d]",                          BITPACK(0100, 0000, 0010, 1011), 0xF0FF, ____mmmm________ });
ops.push_back({ "jsr           @r[%d]",                          BITPACK(0100, 0000, 0000, 1011), 0xF0FF, ____mmmm________ });
ops.push_back({ "rts          ",                                 BITPACK(0000, 0000, 0000, 1011), 0xFFFF, ________________ });
ops.push_back({ "clrmac       ",                                 BITPACK(0000, 0000, 0010, 1000), 0xFFFF, ________________ });
ops.push_back({ "clrs         ",                                 BITPACK(0000, 0000, 0100, 1000), 0xFFFF, ________________ });
ops.push_back({ "clrt         ",                                 BITPACK(0000, 0000, 0000, 1000), 0xFFFF, ________________ });
ops.push_back({ "icbi          @r[%d]",                          BITPACK(0000, 0000, 1110, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "ldc           r[%d] -> SR",                     BITPACK(0100, 0000, 0000, 1110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> SR",                   BITPACK(0100, 0000, 0000, 0111), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> GBR",                    BITPACK(0100, 0000, 0001, 1110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> GBR",                  BITPACK(0100, 0000, 0001, 0111), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> VBR",                    BITPACK(0100, 0000, 0010, 1110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> VBR",                  BITPACK(0100, 0000, 0010, 0111), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> SGR",                    BITPACK(0100, 0000, 0011, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> SGR",                  BITPACK(0100, 0000, 0011, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> SSR",                    BITPACK(0100, 0000, 0011, 1110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> SSR",                  BITPACK(0100, 0000, 0011, 0111), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> SPC",                    BITPACK(0100, 0000, 0100, 1110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> SPC",                  BITPACK(0100, 0000, 0100, 0111), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> DBR",                    BITPACK(0100, 0000, 1111, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc.l         @r[%d]+ -> DBR",                  BITPACK(0100, 0000, 1111, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldc           r[%d] -> r[%d]_BANK",             BITPACK(0100, 0000, 1000, 1110), 0xF08F, ____mmmm_nnn____ });
ops.push_back({ "ldc.l         @r[%d]+ -> r[%d]_BANK",           BITPACK(0100, 0000, 1000, 0111), 0xF08F, ____mmmm_nnn____ });
ops.push_back({ "lds           r[%d] -> MACH",                   BITPACK(0100, 0000, 0000, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "lds.l         @r[%d]+ -> MACH",                 BITPACK(0100, 0000, 0000, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "lds           r[%d] -> MACL",                   BITPACK(0100, 0000, 0001, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "lds.l         @r[%d]+ -> MACL",                 BITPACK(0100, 0000, 0001, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "lds           r[%d] -> PR",                     BITPACK(0100, 0000, 0010, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "lds.l         @r[%d]+ -> PR",                   BITPACK(0100, 0000, 0010, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "ldtlb        ",                                 BITPACK(0000, 0000, 0011, 1000), 0xFFFF, ________________ });
ops.push_back({ "movca.l       R0 -> @r[%d]",                    BITPACK(0000, 0000, 1100, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "nop          ",                                 BITPACK(0000, 0000, 0000, 1001), 0xFFFF, ________________ });
ops.push_back({ "ocbi          @r[%d]",                          BITPACK(0000, 0000, 1001, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "ocbp          @r[%d]",                          BITPACK(0000, 0000, 1010, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "ocbwb         @r[%d]",                          BITPACK(0000, 0000, 1011, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "pref          @r[%d]",                          BITPACK(0000, 0000, 1000, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "prefi         @r[%d]",                          BITPACK(0000, 0000, 1101, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "rte          ",                                 BITPACK(0000, 0000, 0010, 1011), 0xFFFF, ________________ });
ops.push_back({ "sets         ",                                 BITPACK(0000, 0000, 0101, 1000), 0xFFFF, ________________ });
ops.push_back({ "sett         ",                                 BITPACK(0000, 0000, 0001, 1000), 0xFFFF, ________________ });
ops.push_back({ "sleep        ",                                 BITPACK(0000, 0000, 0001, 1011), 0xFFFF, ________________ });
ops.push_back({ "stc           SR -> r[%d]",                     BITPACK(0000, 0000, 0000, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         SR -> @-r[%d]",                   BITPACK(0100, 0000, 0000, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           GBR -> r[%d]",                    BITPACK(0000, 0000, 0001, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         GBR -> @-r[%d]",                  BITPACK(0100, 0000, 0001, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           VBR -> r[%d]",                    BITPACK(0000, 0000, 0010, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         VBR -> @-r[%d]",                  BITPACK(0100, 0000, 0010, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           SGR -> r[%d]",                    BITPACK(0000, 0000, 0011, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         SGR -> @-r[%d]",                  BITPACK(0100, 0000, 0011, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           SSR -> r[%d]",                    BITPACK(0000, 0000, 0011, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         SSR -> @-r[%d]",                  BITPACK(0100, 0000, 0011, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           SPC -> r[%d]",                    BITPACK(0000, 0000, 0100, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         SPC -> @-r[%d]",                  BITPACK(0100, 0000, 0100, 0011), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           DBR -> r[%d]",                    BITPACK(0000, 0000, 1111, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc.l         DBR -> @-r[%d]",                  BITPACK(0100, 0000, 1111, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "stc           r[%d]_BANK -> r[%d]",             BITPACK(0000, 0000, 1000, 0010), 0xF08F, ____nnnn_mmm____ });
ops.push_back({ "stc.l         r[%d]_BANK -> @-r[%d]",           BITPACK(0100, 0000, 1000, 0011), 0xF08F, ____nnnn_mmm____ });
ops.push_back({ "sts           MACH -> r[%d]",                   BITPACK(0000, 0000, 0000, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "sts.l         MACH -> @-r[%d]",                 BITPACK(0100, 0000, 0000, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "sts           MACL -> r[%d]",                   BITPACK(0000, 0000, 0001, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "sts.l         MACL -> @-r[%d]",                 BITPACK(0100, 0000, 0001, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "sts           PR -> r[%d]",                     BITPACK(0000, 0000, 0010, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "sts.l         PR -> @-r[%d]",                   BITPACK(0100, 0000, 0010, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "synco        ",                                 BITPACK(0000, 0000, 1010, 1011), 0xFFFF, ________________ });
ops.push_back({ "trapa         0x%X",                            BITPACK(1100, 0011, 0000, 0000), 0xFF00, ________iiiiiiii });
ops.push_back({ "fmov          Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 1100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov.s        @r[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 1000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov.s        Fr[%d] -> @r[%d]",                BITPACK(1111, 0000, 0000, 1010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov.s        @r[%d]+ -> Fr[%d]",               BITPACK(1111, 0000, 0000, 1001), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov.s        Fr[%d] -> @-r[%d]",               BITPACK(1111, 0000, 0000, 1011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov.s        @(R0 -> r[%d]) -> Fr[%d]",        BITPACK(1111, 0000, 0000, 0110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov.s        Fr[%d] -> @(R0 -> r[%d])",        BITPACK(1111, 0000, 0000, 0111), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmov          Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 1100), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fmov          Dr[%d] -> XDn",                   BITPACK(1111, 0001, 0000, 1100), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fmov          XDm -> Dr[%d]",                   BITPACK(1111, 0000, 0001, 1100), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fmov          XDm -> XDn",                      BITPACK(1111, 0001, 0001, 1100), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fmov.d        @r[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 1000), 0xF10F, ____nnn_mmmm____ });
ops.push_back({ "fmov.d        @r[%d] -> XDn",                   BITPACK(1111, 0001, 0000, 1000), 0xF10F, ____nnn_mmmm____ });
ops.push_back({ "fmov.d        Dr[%d] -> @r[%d]",                BITPACK(1111, 0000, 0000, 1010), 0xF01F, ____nnnnmmm_____ });
ops.push_back({ "fmov.d        XDm -> @r[%d]",                   BITPACK(1111, 0000, 0001, 1010), 0xF01F, ____nnnnmmm_____ });
ops.push_back({ "fmov.d        @r[%d]+ -> Dr[%d]",               BITPACK(1111, 0000, 0000, 1001), 0xF10F, ____nnn_mmmm____ });
ops.push_back({ "fmov.d        @r[%d]+ -> XDn",                  BITPACK(1111, 0001, 0000, 1001), 0xF10F, ____nnn_mmmm____ });
ops.push_back({ "fmov.d        Dr[%d] -> @-r[%d]",               BITPACK(1111, 0000, 0000, 1011), 0xF01F, ____nnnnmmm_____ });
ops.push_back({ "fmov.d        XDm -> @-r[%d]",                  BITPACK(1111, 0000, 0001, 1011), 0xF01F, ____nnnnmmm_____ });
ops.push_back({ "fmov.d        @(R0 -> r[%d]) -> Dr[%d]",        BITPACK(1111, 0000, 0000, 0110), 0xF10F, ____nnn_mmmm____ });
ops.push_back({ "fmov.d        @(R0 -> r[%d]) -> XDn",           BITPACK(1111, 0001, 0000, 0110), 0xF10F, ____nnn_mmmm____ });
ops.push_back({ "fmov.d        Dr[%d] -> @(R0 -> r[%d])",        BITPACK(1111, 0000, 0000, 0111), 0xF01F, ____nnnnmmm_____ });
ops.push_back({ "fmov.d        XDm -> @(R0 -> r[%d])",           BITPACK(1111, 0000, 0001, 0111), 0xF01F, ____nnnnmmm_____ });
ops.push_back({ "fldi0         Fr[%d]",                          BITPACK(1111, 0000, 1000, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "fldi1         Fr[%d]",                          BITPACK(1111, 0000, 1001, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "flds          Fr[%d] -> FPUL",                  BITPACK(1111, 0000, 0001, 1101), 0xF0FF, ____mmmm________ });
ops.push_back({ "fsts          FPUL -> Fr[%d]",                  BITPACK(1111, 0000, 0000, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "fabs          Fr[%d]",                          BITPACK(1111, 0000, 0101, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "fneg          Fr[%d]",                          BITPACK(1111, 0000, 0100, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "fadd          Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 0000), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fsub          Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 0001), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmul          Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 0010), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fmac          FR0 -> Fr[%d] -> Fr[%d]",         BITPACK(1111, 0000, 0000, 1110), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fdiv          Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 0011), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fsqrt         Fr[%d]",                          BITPACK(1111, 0000, 0110, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "fcmp/eq       Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 0100), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "fcmp/gt       Fr[%d] -> Fr[%d]",                BITPACK(1111, 0000, 0000, 0101), 0xF00F, ____nnnnmmmm____ });
ops.push_back({ "float         FPUL -> Fr[%d]",                  BITPACK(1111, 0000, 0010, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "ftrc          Fr[%d] -> FPUL",                  BITPACK(1111, 0000, 0011, 1101), 0xF0FF, ____mmmm________ });
ops.push_back({ "fipr          FVm -> FVn",                      BITPACK(1111, 0000, 1110, 1101), 0xF0FF, ____nnmm________ });
ops.push_back({ "ftrv          XMTRX -> FVn",                    BITPACK(1111, 0001, 1111, 1101), 0xF3FF, ____nn__________ });
ops.push_back({ "fsrra         Fr[%d]",                          BITPACK(1111, 0000, 0111, 1101), 0xF0FF, ____nnnn________ });
ops.push_back({ "fsca          FPUL -> Dr[%d]",                  BITPACK(1111, 0000, 1111, 1101), 0xF1FF, ____nnn_________ });
ops.push_back({ "fabs          Dr[%d]",                          BITPACK(1111, 0000, 0101, 1101), 0xF1FF, ____nnn_________ });
ops.push_back({ "fneg          Dr[%d]",                          BITPACK(1111, 0000, 0100, 1101), 0xF1FF, ____nnn_________ });
ops.push_back({ "fadd          Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 0000), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fsub          Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 0001), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fmul          Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 0010), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fdiv          Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 0011), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fsqrt         Dr[%d]",                          BITPACK(1111, 0000, 0110, 1101), 0xF1FF, ____nnn_________ });
ops.push_back({ "fcmp/eq       Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 0100), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "fcmp/gt       Dr[%d] -> Dr[%d]",                BITPACK(1111, 0000, 0000, 0101), 0xF11F, ____nnn_mmm_____ });
ops.push_back({ "float         FPUL -> Dr[%d]",                  BITPACK(1111, 0000, 0010, 1101), 0xF1FF, ____nnn_________ });
ops.push_back({ "ftrc          Dr[%d] -> FPUL",                  BITPACK(1111, 0000, 0011, 1101), 0xF1FF, ____mmm_________ });
ops.push_back({ "fcnvds        Dr[%d] -> FPUL",                  BITPACK(1111, 0000, 1011, 1101), 0xF1FF, ____mmm_________ });
ops.push_back({ "fcnvsd        FPUL -> Dr[%d]",                  BITPACK(1111, 0000, 1010, 1101), 0xF1FF, ____nnn_________ });
ops.push_back({ "lds           r[%d] -> FPSCR",                  BITPACK(0100, 0000, 0110, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "sts           FPSCR -> r[%d]",                  BITPACK(0000, 0000, 0110, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "lds.l         @r[%d]+ -> FPSCR",                BITPACK(0100, 0000, 0110, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "sts.l         FPSCR -> @-r[%d]",                BITPACK(0100, 0000, 0110, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "lds           r[%d] -> FPUL",                   BITPACK(0100, 0000, 0101, 1010), 0xF0FF, ____mmmm________ });
ops.push_back({ "sts           FPUL -> r[%d]",                   BITPACK(0000, 0000, 0101, 1010), 0xF0FF, ____nnnn________ });
ops.push_back({ "lds.l         @r[%d]+ -> FPUL",                 BITPACK(0100, 0000, 0101, 0110), 0xF0FF, ____mmmm________ });
ops.push_back({ "sts.l         FPUL -> @-r[%d]",                 BITPACK(0100, 0000, 0101, 0010), 0xF0FF, ____nnnn________ });
ops.push_back({ "frchg        ",                                 BITPACK(1111, 1011, 1111, 1101), 0xFFFF, ________________ });
ops.push_back({ "fschg        ",                                 BITPACK(1111, 0011, 1111, 1101), 0xFFFF, ________________ });
ops.push_back({ "fpchg        ",                                 BITPACK(1111, 0111, 1111, 1101), 0xFFFF, ________________ });
 